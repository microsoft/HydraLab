apply from: "common.gradle"
apply plugin: "io.freefair.lombok"
apply plugin: "jacoco"
jacoco {
    toolVersion = "0.8.8"
    reportsDir = file('build/reports/jacoco')
}
subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    }
    test {
        useJUnitPlatform()
    }
/*
    gradle.projectsEvaluated {
        tasks.withType(JacocoCoverageVerification) {
            violationRules {
                rule {
                    limit {
                        minimum = 0.5
                    }
                }
            }
        }
    }
*/
}
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.2.1.RELEASE")
        classpath "io.freefair.gradle:lombok-plugin:4.1.4"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.14'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            // Official document for lint options: https://docs.oracle.com/javase/7/docs/technotes/tools/solaris/javac.html#xlintwarnings
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xlint:fallthrough" << "-Xlint:static" << "-Xlint:try" << "-Xlint:varargs" << "-Xlint:finally"
        }
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(subprojects.test)

    def projects = ['center', 'common', 'agent', 'sdk', 'gradle_plugin', 'runner']
    def jacocoProjects = subprojects.findAll { projects.contains(it.getName()) }

    additionalSourceDirs.from = files(jacocoProjects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(jacocoProjects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(jacocoProjects.sourceSets.main.output)
    executionData.from = files(jacocoProjects.jacocoTestReport.executionData)

    reports {
        html.enabled true
        xml.enabled true
    }
}

task packageMacInstaller(type: Zip) {
    from 'agent/agent_installer/MacOS/iOS'
    archiveName 'Hydra_Agent_Installer_Mac.zip'
    destinationDir file('build/installer')
}

task packageWindowsInstaller(type: Zip) {
    from 'agent/agent_installer/Windows'
    archiveName 'Hydra_Agent_Installer_Windows.zip'
    destinationDir file('build/installer')
}