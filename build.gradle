apply from: "common.gradle"
apply plugin: "io.freefair.lombok"
apply plugin: "jacoco"
jacoco {
    toolVersion = "0.8.8"
    reportsDir = file('build/reports/jacoco')
}
subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    tasks.withType(Test) {
        jacoco {
            destinationFile = file("$rootProject.buildDir/jacoco/test.exec")
        }
    }

}
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.2.1.RELEASE")
        classpath "io.freefair.gradle:lombok-plugin:4.1.4"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.14'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        google()
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            // Official document for lint options: https://docs.oracle.com/javase/7/docs/technotes/tools/solaris/javac.html#xlintwarnings
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xlint:fallthrough" << "-Xlint:static" << "-Xlint:try" << "-Xlint:varargs" << "-Xlint:finally"
        }
        tasks.withType(JacocoReport){
            reports {
                html.enabled = true
                xml.enabled = true
                csv.enabled = false
            }
        }
    }
}
task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.from = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.from = files(subprojects.jacocoTestReport.classDirectories)
    executionData.from = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData.from = files(executionData.findAll {
            it.exists()
        })
    }
}
