ext {
    springBootWebVersion = "2.2.5.RELEASE"
    hydraLabVersion = '1.0.0'
}

task NewBranch(group: 'workflow') {
    doFirst {
        // read branch prefix
        def localProperties = new Properties()
        def localPropFile = file("local.properties")
        if (!localPropFile.exists()) {
            localPropFile.createNewFile()
            throw new RuntimeException("please provide branchPrefix in file: " + localPropFile);
        }
        localPropFile.withInputStream { localProperties.load(it) }
        def branchPrefix = localProperties.getProperty('branchPrefix')
        if (!branchPrefix) {
            throw new RuntimeException("please provide branchPrefix in file: " + localPropFile);
        }

        // If already on temp branch ...
        def branchName = new StringBuilder()
        def getBranch = "git rev-parse --abbrev-ref HEAD".execute()
        def serr = new StringBuilder()
        getBranch.consumeProcessOutput(branchName, serr)
        getBranch.waitForOrKill(2 * 1000)
        println "branchName> $branchName"
        def bName = branchName.toString().trim()
        def middleFolder = "temporary"
        if (bName.startsWith("${branchPrefix}/${middleFolder}/")) {
            throw new RuntimeException("already on " + bName);
        }

        // checkout new branch
        def newBranchName = "${branchPrefix}/${middleFolder}/${new Date().format("yyyy_MM_dd_HH_mm_ss")}"
        def proc = "git checkout -b ${newBranchName}".execute()
        def sout = new StringBuilder()
        serr = new StringBuilder()
        proc.consumeProcessOutput(sout, serr)
        proc.waitForOrKill(5 * 1000)
        println "out> $sout \nerr> $serr"
    }
}