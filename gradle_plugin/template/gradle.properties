# Static params, can directly use the following settings as default in DevOps pipeline, or override them using gradle params.
runningType = # Required, define the test type. Value: {INSTRUMENTATION (Default), SMART, MONKEY, APPIUM, APPIUM_CROSS, APPIUM_MONKEY, T2C_JSON}
pkgName = # Required, absolute package name of the app.
deviceIdentifier = # Required, identifier of the device / group of devices for running the test. For APPIUM_CROSS test specifically, the agentId for agent. Please obtain the value from the front page.
queueTimeOutSeconds = # Required, timeout(in seconds) threshold of waiting the tests to be started when target devices are under TESTING.
runTimeOutSeconds = # Required, timeout(in seconds) threshold of running the tests.

# @Deprecated, use param "triggerType" instead in the latest version.
type = # Optional, how the test is triggered, currently the value is set with $(Build.Reason) from ADO pipeline, or default to be "API". Value: {API (Default), $(Build.Reason)}
# SINGLE: a single device specified by param deviceIdentifier;
# REST: rest devices in the group specified by param deviceIdentifier;
# ALL: all devices in the group specified by param deviceIdentifier;
groupTestType = # Optional, Value: {SINGLE (Default), REST, ALL}
# @Deprecated, use param "testRunArgs" instead in the latest version.
instrumentationArgs = # Optional, All extra params. Example: "a1=x1|x2,b1=x3|x4|x5,c1=x6" will pass variables '{"a1": "x1,x2", "b1": "x3,x4,x5", "c1": "x6"}'

# Optional, path to JSON config file that is used for attachment uploading. File content should be in the following schema:
# [{
#  "fileName":"name of file to be uploaded",
#  "filePath":"path of file to be uploaded",
#  "fileType":"type of file to be uploaded, selected from value 'COMMON'|'PACKAGE'|'APP'|'TEST_APP'",
#  "loadType":"loading type when testing, selected from value 'COPY'|'UNZIP'",
#  "loadDir":"relative path for file to be loaded"
#},
#{
#  ...
#}]
attachmentConfigPath =
neededPermissions = # Optional, list of permission names that the test requires, separated by comma. Example: "android.Permission1, android.Permission2"

# Optional, list of actions that the test will operate on the device, content should be in format of a JSON string.
# (In yml config file, this param is assigned with value directly by hierarchy, see more in: https://github.com/microsoft/HydraLab/blob/main/gradle_plugin/template/testSpec.yml)
# 1. Current support actions for during setting up and tearing down, keys of the first level can be selected from: setUp | tearDown. The value of them should both be a JSON array.
# 2. Device types, as the value of key "deviceType", currently can be selected from a supporting list ["Android", "iOS", etc...]. This key is optional.
# 3. Method types, as the value of key "method", currently can be selected from a supporting list ["setProperty", "setDefaultLauncher", "backToHome", "changeGlobalSetting", "changeSystemSetting"];
# 4. Provide corresponding params for target methods.
# Example: "{\"setUp\":[{\"deviceType\":\"Android\",\"method\":\"setProperty\",\"args\":[\"value A\", \"value B\"]}, {...}, {...}], \"tearDown\":[{\"method\":\"backToHome\",\"args\":[]}, {...}, {...}]}"
deviceActions =

# Optional, list of inspection strategies used for performance test config, content should be in format of a JSON string.
# (In yml config file, this param is assigned with value directly by hierarchy, see more in: https://github.com/microsoft/HydraLab/blob/main/gradle_plugin/template/testSpec.yml)
# Example: "[{"strategyType":"TEST_SCHEDULE","interval":300,"intervalUnit":"MILLISECONDS","inspection":{"inspectorType":"INSPECTOR_ANDROID_BATTERY_INFO","appId":"com.microsoft.appmanager","description":"test schedule"}},{"strategyType":"TEST_LIFECYCLE","when":["TEST_STARTED","TEST_SUCCESS","TEST_FAILURE","TEST_RUN_STARTED","TEST_RUN_FINISHED"],"interval":0,"inspection":{"inspectorType":"INSPECTOR_ANDROID_BATTERY_INFO","appId":"com.microsoft.appmanager","description":"test schedule"}}]"
inspectionStrategiesStr =

# @Deprecated, use param "artifactTag" instead in the latest version.
# Optional, used to change test result folder name prefix. Is commonly added when artifact folder is used for specific approaches.
# Normal result folder name: $(runningType)-$(dateTime)
# Result folder name with tag: $(runningType)-$(tag)-$(dateTime)
tag =
# Flag to enable failing the task by throwing exception when test failed.
enableFailTask = # Optional, Value: {true (Default), false}

# Dynamic params, should be kept secret or may change frequently.
# Recommend to set these variables within pipeline.
hydraLabAPIHost = # Required, Hydra Lab host address, needs to be specified as default value is cleared for compliance.
hydraLabAPISchema = # Optional, Hydra Lab API schema. Value: {https (Default), http}.
appPath = # Required, path to the app file.
authToken = # Required, Hydra Lab user authentication token for running test.
# Optional, the name of TEAM that the creator of authToken belongs to.
# Value: any specified TEAM names of Hydra Lab, if not specified, will be set in Backend with creator's default TEAM name.
teamName =


# Required for test type: INSTRUMENTATION, APPIUM, APPIUM_CROSS
testAppPath = # Path to the test app/jar or JSON-described test file.

# Optional for test type: INSTRUMENTATION
# Define test scope of the given test package.
# Value: {TEST_APP (Default if both testScope and testSuiteName are empty), PACKAGE, CLASS (Default)}
# TEST_APP: all tests in the test application
# PACKAGE: all tests in the given Java package name
# CLASS: all tests in the given suite/test class
testScope =
# Required for test type: APPIUM, APPIUM_CROSS, INSTRUMENTATION (testScope = PACKAGE|CLASS)
# [For INSTRUMENTATION test] This value has different meanings based on param testScope.
#  testScope=TEST_APP: testSuiteName is not used.
#  testScope=PACKAGE: testSuiteName is the Java package name that contains all test classes to be tested.
#  testScope=CLASS: testSuiteName is the class name with absolute class path of the test suite/class, which will be run in the test.
# [For APPIUM/APPIUM_CROSS test] testSuiteName is the class name with absolute class path of the test suite, which will be run in the test.
testSuiteName =
# Required for test type: INSTRUMENTATION
testPkgName = # Absolute package name of the test app.


# Optional for test type: SMART, MONKEY, APPIUM_MONKEY
maxStepCount = # The max step count for each SMART test.
# @Deprecated, use param "testRound" instead in the latest version.
# Optional for test type: SMART
deviceTestCount = # The number of times to run SMART test.


# Optional for test type: INSTRUMENTATION
testRunnerName = # The testInstrumentationRunner of INSTRUMENTATION (Espresso) test.  Value: {androidx.test.runner.AndroidJUnitRunner (Default), customized test runner name}


# Optional for test type: APPIUM, APPIUM_CROSS
frameworkType = # JUNIT version used for Appium test. Value: {JUNIT4 (Default), JUNIT5}


# Optional for test type: APPIUM_CROSS, T2C_JSON
needUninstall = # Apk needs to be uninstalled. Value: {true (Default), false}
needClearData = # Apk data needs to be cleaned. Value: {true (Default), false}