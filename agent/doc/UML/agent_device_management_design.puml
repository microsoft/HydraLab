@startuml
'https://plantuml.com/class-diagram
enum DeviceType{
    ANDROID
    IOS
    WINDOWS
}

class ConnectedDevice{
    DeviceType deviceType;
}

class AgentManagementService {
    Map<String, DeviceInfo> deviceInfoMap
    File testBaseDir
    File deviceLogBaseDir
}
class DeviceStatusListenerManager{
    List<DeviceStatusListener> deviceStatusListeners
    registerDeviceStatusListener(DeviceStatusListener)
    onDeviceInactive(DeviceInfo)
    onDeviceActive(DeviceInfo)
}
class TestTaskEngineService{
    TestRunDevice chooseDevice(TestTask)
}


class DeviceInfo{
    Map<Thread, String> currentCommand
    Map<Thread, String> currentProcess
    Map<Thread, TestTask> currentTask
}

class TestRunDeviceOrchestrator{
    void setup(TestRunDevice, Logger);
    void unset(TestRunDevice, Logger);
    void killAll(TestRunDevice);
    void getAppiumDriver(TestRunDevice, Logger);
    void quitAppiumDriver(TestRunDevice, Logger);
    void wakeUpDevice(TestRunDevice, Logger);
    boolean installApp(TestRunDevice,String packagePath, Logger);
    boolean uninstallApp(TestRunDevice, String packageName, Logger);
    void resetPackage(TestRunDevice, String packageName, Logger);
    void startScreenRecorder(TestRunDevice, File folder, int maxTimeInSecond, Logger);
    void stopScreenRecorder(TestRunDevice);
    void startLogCollector(TestRunDevice, String pkgName, TestRun testRun, Logger);
    void stopLogCollector(TestRunDevice);
    void setRunningTestName(TestRunDevice, String runningTestName);
    void addCurrentTask(TestRunDevice, TestTask);
    void finishTask(TestRunDevice);
    void quitMobileAppiumDriver(TestRunDevice, Logger);
    void updateScreenshotImageAsyncDelay(TestRunDevice, long delayMillis, FileAvailableCallback, Logger);
    void grantAllTaskNeededPermissions(TestRunDevice, TestTask, Logger);
}


class TestRunDevice{
    String Tag
    DeviceInfo deviceInfo;
    WebDriver appiumDriver;
    ScreenRecorder screenRecorder;
    LogCollector logCollector;
}

class TestRunDeviceCombo extends TestRunDevice{
    List<TestRunDevice> pairedDevices
    TestRunDevice getDeviceByTag(String tag)
    List<TestRunDevice> getDevices()
}
Class TestRun{
    TestRunDevice device
}
class TestRunner{
    runTest(TestTask,TestRunDevice)
}

interface DeviceDriver{
      File getScreenShot(DeviceInfo deviceInfo,  Logger logger);
      File getScreenShotWithStrategy(DeviceInfo deviceInfo,  Logger logger, AgentUser.BatteryStrategy batteryStrategy);
      void wakeUpDevice(DeviceInfo deviceInfo,  Logger logger);
      void backToHome(DeviceInfo deviceInfo,  Logger logger);
      void grantPermission(DeviceInfo deviceInfo, String packageName,String permissionName,  Logger logger);
      void addToBatteryWhiteList(DeviceInfo deviceInfo, String packageName,Logger logger);
      boolean installApp(DeviceInfo deviceInfo, String packagePath,  Logger logger);
      boolean uninstallApp(DeviceInfo deviceInfo, String packageName,  Logger logger);
      void resetPackage(DeviceInfo deviceInfo, String packageName,Logger logger);
      void pushFileToDevice(DeviceInfo deviceInfo, String pathOnAgent,String pathOnDevice,  Logger logger) throws Exception;
      void pullFileFromDevice(DeviceInfo deviceInfo, String pathOnDevice,Logger logger) throws Exception;
      ScreenRecorder getScreenRecorder(DeviceInfo deviceInfo, File folder,Logger logger);
      boolean grantAllTaskNeededPermissions(DeviceInfo deviceInfo, TestTask task,Logger logger);
      boolean grantAllPackageNeededPermissions(DeviceInfo deviceInfo, File packageFile,String targetPackage,boolean allowCustomizedPermissions,  Logger logger);
      Logger getDeviceLogger(DeviceInfo device);
      void updateAllDeviceInfo();
      LogCollector getLogCollector(DeviceInfo deviceInfo, String pkgName,TestRun testRun, Logger logger);
      void setProperty(DeviceInfo deviceInfo, String property, String val,Logger logger);
      boolean setDefaultLauncher(DeviceInfo deviceInfo, String packageName,String defaultActivity,  Logger logger);
      boolean isAppInstalled(DeviceInfo deviceInfo, String packageName,Logger logger);
      boolean grantProjectionAndBatteryPermission(DeviceInfo deviceInfo,String recordPackageName,Logger logger);
      void testDeviceSetup(DeviceInfo deviceInfo,  Logger logger);
      void removeFileInDevice(DeviceInfo deviceInfo, String pathOnDevice, Logger logger);
      void testDeviceUnset(DeviceInfo deviceInfo, Logger logger);
      WebDriver getAppiumDriver(DeviceInfo deviceInfo, Logger logger);
      void quitAppiumDriver(DeviceInfo deviceInfo, Logger logger);
      void execCommandOnDevice(DeviceInfo deviceInfo, String command, Logger logger);
      void execCommandOnAgent(DeviceInfo deviceInfo, String command, Logger logger);
      AppiumServerManager getAppiumServerManager();
      void init();
}
class DeviceDriverManager implements DeviceDriver{
    Map<DeviceType, DeviceDriver> deviceDrivers
}
abstract class AbstractDeviceDriver implements DeviceDriver
class AndroidDeviceDriver extends AbstractDeviceDriver
class IOSDeviceDriver   extends AbstractDeviceDriver
class WindowsDeviceDriver extends AbstractDeviceDriver

TestRunner --> TestRun : create
TestRun ---> TestRunDevice
TestRunner -r--> TestRunDeviceOrchestrator

TestRunDeviceOrchestrator --> DeviceDriverManager

TestTaskEngineService --> TestRunner

DeviceDriver -> DeviceInfo
DeviceDriverManager *--> AndroidDeviceDriver
DeviceDriverManager *--> IOSDeviceDriver
DeviceDriverManager *--> WindowsDeviceDriver
AndroidDeviceDriver *--> DeviceStatusListenerManager : notify
IOSDeviceDriver *--> DeviceStatusListenerManager : notify
WindowsDeviceDriver *--> DeviceStatusListenerManager : notify

DeviceStatusListenerManager .. AgentManagementService : notify

@enduml

@startuml discovery_service_design

class EnvCapabilityDiscoveryService {
    +discover()
}

class EnvCapabilityScanner {
    +List<EnvCapability> scan()
}

EnvCapabilityDiscoveryService *--> EnvCapabilityScanner
EnvCapabilityDiscoveryService *--> EnvInfo
EnvInfo *--> EnvCapability
EnvCapability *--> CapabilityKeyword
WindowsScanner -u-|> EnvCapabilityScanner
LinuxScanner -u-|> EnvCapabilityScanner
MacOSScanner -u-|> EnvCapabilityScanner

EnvCapabilityScanner .. EnvCapability: produce
@enduml

@startuml agent_capability_design

class AgentManagementService {
    EnvInfo envInfo;
    List<AgentFunctionAvailability> functionAvailabilities;
    registerFunctionAvailability(String serviceName,ServiceType,boolean isEnabled, List<EnvCapabilityRequirement>)
}
AgentManagementService -r-> EnvCapabilityDiscoveryService
class TestRunner{
    List<EnvCapabilityRequirement>
}
class DeviceDriver{
    List<EnvCapabilityRequirement>
}

TestRunner -r-> AgentManagementService
DeviceDriver -r-> AgentManagementService
TestRunner *--> EnvCapabilityRequirement
DeviceDriver *--> EnvCapabilityRequirement

class EnvCapabilityRequirement{
    +private boolean isReady
    +EnvCapability envCapability
    +boolean meet(EnvCapability envCapability)
}
enum AgentFunctionType{
    TEST_RUNNER
    DEVICE_DRIVER
}
class AgentFunctionAvailability{
    +AgentFunctionType functionType
    +String functionName
    +List<EnvCapabilityRequirement> envCapabilityRequirements
    +boolean enabled
    +boolean available
}
AgentManagementService *-->AgentFunctionAvailability
AgentFunctionAvailability ..> AgentFunctionType
class AgentUser{
    List<AgentFunctionAvailability> functionAvailabilities;
}
AgentManagementService ..> AgentUser : provide
@enduml

@startuml agent_capability_design_sequence
participant SpringContainer
participant EnvCapabilityDiscoveryService
participant AgentManagementService
participant DeviceDriverManager
participant TestRunner
participant AgentWebSocketClientService
participant CenterApplication

activate SpringContainer
activate CenterApplication
SpringContainer --> EnvCapabilityDiscoveryService : createBean
activate EnvCapabilityDiscoveryService
EnvCapabilityDiscoveryService --> EnvCapabilityDiscoveryService : discoverEnvCapability
SpringContainer --> AgentManagementService : createBean
activate AgentManagementService
EnvCapabilityDiscoveryService --> AgentManagementService : provideEnvCapability
deactivate EnvCapabilityDiscoveryService
SpringContainer --> DeviceDriverManager : createDriverManager
activate DeviceDriverManager
DeviceDriverManager --> DeviceDriverManager : add deviceDrivers
deactivate DeviceDriverManager
SpringContainer --> AgentManagementService : registerDriverAvailability

SpringContainer --> TestRunner : createBean
activate TestRunner
TestRunner --> TestRunner : init
TestRunner --> AgentManagementService : registerRunnerAvailability
deactivate TestRunner
SpringContainer --> AgentWebSocketClientService : createBean
activate AgentWebSocketClientService
AgentWebSocketClientService --> AgentWebSocketClientService : buildAgentUser
AgentWebSocketClientService --> AgentManagementService : getServiceAvailabilities
AgentManagementService --> AgentWebSocketClientService : return serviceAvailabilities
deactivate AgentManagementService
AgentWebSocketClientService --> CenterApplication : provide agent info
CenterApplication --> CenterApplication : display agent info
deactivate CenterApplication
deactivate AgentWebSocketClientService
deactivate SpringContainer
@enduml