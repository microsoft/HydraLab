@startuml packageScanner
interface TestRunEngine {
    TestReport run(Task, TaskRunDevice);
}
interface TestRunLifecycle {
    TaskRun setup(Task, TaskRunDevice);
    void execute(TaskRun) throws Exception;
    TestResult analyze(TaskRun);
    TestReport report(TaskRun, Result);
    void teardown(TaskRun);
    void help(TaskRun taskInstance, Result result);
}
class AnalysisRunner implements TestRunEngine,TestRunLifecycle{
    +Report run(AnalysisTask task)

}
class Scanner extends AnalysisRunner{
    +protected AnalysisResult run(AnalysisTask task)
    +AnalysisResult initReport(AnalysisTask task)
    +analysisPackage(AnalysisResult packageReport,File file, File outputFolder)
    +scanSensitiveWords(AnalysisResult packageReport,File file, String[] sensitiveWords, File outputFolder)
}
class ApkCanaryExecutor {}
class ApkLeaksExecutor{}
class APKScanner extends Scanner {
    +APKReport initReport(AnalysisTask task)
    +analysisPackage(APKReport apkReport,File file, File outputFolder)
    +scanSensitiveWords(APKReport apkReport,File file, String[] sensitiveWords, File outputFolder)
}
APKScanner --> ApkCanaryExecutor
APKScanner --> ApkLeaksExecutor
class WINAppScanner extends Scanner {}
class IPAScanner extends Scanner {}

@enduml

@startuml TaskDataType
class TaskResult{
    TestRunId testRunId;
    TaskId taskId;
    TaskState state;
}

enum TaskState{
    PASS,
    FAIL,
    SKIP,
    CANCEL,
    BLOCK,
    WARNING
}

class AnalysisResult extends TaskResult{
    String id;
    Date ingestTime;
    List<String> reportFilePaths;
}
class TestResult extends TaskResult{}
class APKReport extends AnalysisResult{
    String packageName;
    List<LeakInfo> leakInfoList = new ArrayList<>();
    ApkSizeReport apkSizeReport;
    ApkManifest apkManifest;
    BuildInfo buildInfo;
}
class LeakInfo {
    String keyword;
    List<String> LeakWordList;
}
APKReport -> LeakInfo
class Task{
    List<TaskRun> taskRuns;
    Task transformToTask(TestTaskSpec taskSpec);
}
class AnalysisTask extends Task{
    List<AnalysisConfig> analysisConfigs;
}
class AnalysisConfig{
    String analysisType;
    Map<String,String> analysisConfig;
}
class TestTask extends Task{}

class TaskRun{
    Result result;
}
TaskRun -> TaskResult

TaskResult -> TaskState

Task -> TaskRun

class TestTaskSpec{
    String taskType
}

TestTaskSpec --> Task : transformToTask(TestTaskSpec)

AnalysisTask --> AnalysisConfig
@enduml

@startuml package_scanner_design_sequence
participant User
participant CenterService
participant AgentService
participant AnalysisRunner
participant Scanner

activate AgentService
AgentService -> AgentService : scan Agent Function Availability
AgentService -> CenterService : register Agent Function Availability

deactivate AgentService

activate User
activate CenterService
User -> CenterService : request scan package(with scan configuration)

CenterService -> CenterService : convert TaskSpec to AnalysisTask
CenterService -> AgentService : distribute AnalysisTask
activate AgentService

AgentService -> AnalysisRunner : choose an AnalysisRunner by Task type
activate AnalysisRunner

AnalysisRunner -> Scanner : choose a Scanner implementation
activate Scanner
Scanner -> Scanner : scan package with configuration
Scanner -> AnalysisRunner : return APKReport
deactivate Scanner
AnalysisRunner -> AgentService : return AnalysisResult
deactivate AnalysisRunner
AgentService -> CenterService : return TaskResult & save to database
deactivate AgentService
CenterService -> User : provide front-end to view result
deactivate CenterService
deactivate User

@enduml