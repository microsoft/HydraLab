
@startmindmap performance_test_inspection_entrypoints
* Performance Test
** Define the strategy in TestTask
*** LifeCycle
****:
TEST_STARTED
TEST_FINISHED
TEST_FAILED
TEST_RUN_STARTED
TEST_RUN_FINISHED
;
*** Schedule
** Call inspect() method in a test case
*** Hydra SDK
*** T2C
*** Espresso
@endmindmap
@startjson taps_to_cases_json_with_performance_test_actions
{
  "drivers": [
    {
      "id": "13211FDD400183",
      "platform": "android",
'      Deprecated Name : init
      "setup": {
        "launcherApp": ""
      }
'      Can also add tearDown here to match the device action design
    }
  ],
'  deprecated name: cases
  "actions": [
    {
      "index": 0,
      "driverId": "13211FDD400183",
      "action": {
        "actionType": "inspectBatteryUsage",
        "arguments": {
          "targetApp": "com.microsoft.appmanager",
          "description": "Start LTW",
          "isReset": false
        }
      },
      "isOptional": false
    },
    {
      "index": 1,
      "driverId": "13211FDD400183",
      "action": {
        "actionType": "inspectLatencyStart",
        "arguments": {
          "description ": "Start LTW"
        }
      },
      "isOptional": false
    },
    {
      "index": 2,
      "driverId": "13211FDD400183",
      "action": {
        "actionType": "inspectMemoryUsage",
        "arguments": {
          "targetApp ": "com.microsoft.appmanager",
          "description ": "Start LTW",
          "isReset": true
        }
      },
      "isOptional": false
    },
    {
      "index": 3,
      "driverId": "13211FDD400183",
      "action": {
        "actionType": "inspectLatencyEnd",
        "arguments": {
          "description ": "Start LTW"
        }
      },
      "isOptional": false
    }
  ]
}
@endjson

@startuml perf_test_class_design
class InspectionStrategy {

    + StrategyType strategyType;

    // if the strategyType == TEST_LIFECYCLE
    + List<WhenType> when;

    // if the strategyType == TEST_SCHEDULE
    + long interval;
    + TimeUnit intervalUnit;
}

interface PerformanceTestListener {
    void testStarted();
    void testFinished();
    void testFailure();
    void testRunStarted();
    void testRunFinished();
}

class PerformanceTestManagementService {
    Map<String, List<ScheduledFuture<?>>> inspectPerformanceTimerMap
    Map<String, List<InspectionStrategy>> testLifeCycleStrategyMap
}

AndroidBatteryInspector -up--o PerformanceTestManagementService
AndroidMemoryInfoInspector -up--o PerformanceTestManagementService
AndroidMemoryDumpInspector -up--o PerformanceTestManagementService
WindowsBatteryInspector -up--o PerformanceTestManagementService
WindowsMemoryInspector -up--o PerformanceTestManagementService
LatencyInspector -up--o PerformanceTestManagementService

PerformanceTestManagementService -> InspectionStrategy
PerformanceTestManagementService -u-|> PerformanceTestListener

PerformanceTestManagementService -left-o TestRunner
AppiumListener -d->  PerformanceTestListener
Junit5Listener -d->  PerformanceTestListener
EspressoTestInfoProcessorListener  -d->  PerformanceTestListener
@enduml

@startuml espresso_performance_test_design
class EspressoPerformanceParser {
    void processNewLines()
}
EspressoPerformanceParser --|> InstrumentationResultParser
TestRunner <|-- EspressoRunner
EspressoRunner -> EspressoPerformanceParser
EspressoPerformanceParser -> PerformanceInspectionService
@enduml

@startuml performance_latency_test_sequence
TestRunner -> PerformanceTestManagementService : inspect(LatencyStartInspection)
note left
  LatencyStartInspection{
    description: "Start LTW"
    isRest: true
  }
  LatencyEndInspection {
    description: "End LTW"
    isRest:false
  }
end note
PerformanceTestManagementService -> LatencyInspector : inspect(LatencyStartInspection)
activate LatencyInspector
LatencyInspector -> PerformanceTestManagementService : PerformanceInspectionResult
deactivate LatencyInspector
TestRunner -> PerformanceTestManagementService : inspect(LatencyEndInspection)
PerformanceTestManagementService -> LatencyInspector : inspect(LatencyEndInspection)
activate LatencyInspector
LatencyInspector -> PerformanceTestManagementService : PerformanceInspectionResult
deactivate LatencyInspector
TestRunner -> PerformanceTestManagementService : tearDown()
PerformanceTestManagementService -> LatencyParser : parse(PerformanceTestResult)
activate LatencyParser
LatencyParser -> PerformanceTestManagementService : LatencyTestResult
deactivate LatencyParser
note right
  Parse the latency from "start" to "end"
end note
@enduml

