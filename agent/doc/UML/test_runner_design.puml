@startuml test_runner_class_relation
abstract class TestRunner

interface TestRunEngine {
    TestReport run(TestTask, TestRunDevice);
}
interface TestRunLifecycle {
    TestRun setup(TestTask, TestRunDevice);
    void execute(TestRun) throws Exception;
    TestResult analyze(TestRun);
    TestReport report(TestRun, TestResult);
    void teardown(TestRun);
    void help(TestRun testRun, TestResult);
}

TestRunner -u-|> TestRunEngine
TestRunner -u-|> TestRunLifecycle

AppiumRunner -u-|> TestRunner
EspressoRunner -u-|> TestRunner
AdbMonkeyRunner -u-|> TestRunner
T2CRunner -u-|> AppiumRunner
SmartRunner -u-|> TestRunner


interface TestRunningCallback
TestRunner -l-> TestRunningCallback

TestRunner *-r-> DeviceManager

AppiumCrossRunner -u-|> AppiumRunner


@enduml

@startuml running_sequence
AgentWebSocketClientService -> TestTaskEngineService :runTestTask(TestTaskSpec)
activate TestTaskEngineService
TestTaskEngineService -> TestTaskEngineService: chooseDevices
TestTaskEngineService -> TestTask: convertToTestTask(static)

TestTaskEngineService -> DeviceTaskControlExecutor: runForAllDeviceAsync
activate DeviceTaskControlExecutor



DeviceTaskControlExecutor --> TestThreadPool.Executor: execute
activate TestThreadPool.Executor

DeviceTaskControlExecutor -> TestTaskEngineService
deactivate DeviceTaskControlExecutor

TestTaskEngineService -> AgentWebSocketClientService
deactivate TestTaskEngineService

participant DeviceTask
TestThreadPool.Executor -> DeviceTask: doTask
activate DeviceTask
DeviceTask -> TestRunner: runTestOnDevice
activate TestRunner
TestRunner -> DeviceTask
deactivate TestRunner
DeviceTask -> TestThreadPool.Executor
deactivate DeviceTask

TestThreadPool.Executor -> TaskCompletion: onComplete
activate TaskCompletion

TaskCompletion -> TestRunningCallback: onAllComplete
activate TestRunningCallback

TestRunningCallback -> TaskCompletion
deactivate TestRunningCallback

TaskCompletion -> TestThreadPool.Executor
deactivate TaskCompletion

@enduml

@startuml running_sequence_new
AgentWebSocketClientService -> TestTask: convertToTestTask(static)
AgentWebSocketClientService -> TestTaskEngineService :runTestTask(TestTask)
activate TestTaskEngineService
TestTaskEngineService -> TestTaskEngineService: chooseDevices
TestTaskEngineService -> DeviceTaskControlExecutor: runForAllDeviceAsync
deactivate TestTaskEngineService
DeviceTaskControlExecutor --> TestRunnerManager: runTest
TestRunnerManager --> TestRunEngine: run
activate TestRunEngine
TestRunEngine --> TestRunLifecycle: setup
TestRunEngine --> TestRunLifecycle: execute
TestRunEngine --> TestRunLifecycle: analyze
TestRunEngine --> TestRunLifecycle: report
TestRunEngine --> TestRunLifecycle: teardown
TestRunEngine --> TestRunLifecycle: help
deactivate TestRunEngine
@enduml

@startjson test_task_spec_design
{
    "fileSetId": "006b6ec7-52f9-45c7-84ad-419fc4315134",
    "pkgName": "com.microsoft.appmanager",
    "runningType": "APPIUM_CROSS",
    "testSuiteClass": "com.microsoft.appmanager.longhaultest.suites.SurfaceSmokeTestSuite",
    "deviceIdentifier": "55d93bc7-4d1d-4749-b493-a9de063a8a66",
    "groupTestType": "SINGLE",
    "maxStepCount": "",
    "deviceTestCount": "",
    "testTimeOutSec": "",
    "deviceActions":{
        "setUp":[{
            "deviceType":"Android",
            "method":"setProperty",
            "args": ["log.tag.WelcomeScreen","Verbose"]
        },
        {
            "deviceType":"Android",
            "method":"setProperty",
            "args": ["log.tag.WelcomeScreen","Verbose"]
        },
        {
            "deviceType":"Android",
            "method":"setDefaultLauncher",
            "args": ["com.android.launcher3.DefaultLauncherApp"]
        }],
        "tearDown":[{
            "deviceType":"Android",
            "method":"setProperty",
            "args": ["log.tag.WelcomeScreen","-"]
        }]
     },
    "testRunArgs": {
        "enableScreenRecord": false,
        "testInterval": 5000,
        "runtimeUpLimit": 1,
        "recordLatency": true,
        "recordMemory": true,
        "databaseUsername": "teams",
        "databasePassword": "***********",
        "ypcVersion": "1.22112.32.0",
        "oem": "Surface",
        "isReset": false
    },
    "frameworkType": "JUnit4",
    "testRunnerName": "androidx.test.runner.AndroidJUnitRunner",
    "inspectionStrategies": [
        {
            "strategyType": "TEST_SCHEDULE",
            "interval": 300,
            "intervalUnit": "MILLISECONDS",
            "inspection": {
                "inspectorType": "INSPECTOR_ANDROID_BATTERY_INFO",
                "appId": "com.microsoft.appmanager",
                "description": "test schedule"
            }
        },
        {
             "strategyType": "TEST_LIFECYCLE",
             "when": [
                 "TEST_STARTED",
                 "TEST_SUCCESS",
                 "TEST_FAILURE",
                 "TEST_RUN_STARTED",
                 "TEST_RUN_FINISHED"
             ],
             "inspection": {
                 "inspectorType": "INSPECTOR_ANDROID_BATTERY_INFO",
                 "appId": "com.microsoft.appmanager",
                 "description": "test schedule"
             }
         }
    ]
}
@endjson

@startuml test_runner_listener_design
abstract class Runner
interface TestRunnerListener {
    onTestCaseStart()
    onTestRunStart()
    onTestSuiteStart()
    onTestCaseEnd()
    onTestRunEnd()
    onTestSuiteEnd()
}

Runner *--> TestRunnerListener
@enduml

@startuml test_entities_relationship

entity (TestTaskSpec)
note left of TestTaskSpec: TestTaskSpec is the\n test task specification\n from the client
entity (TestTask)
note left of TestTask: TestTask is converted\n from TestTaskSpec\n and it's the runtime data\n object for the test task
entity (TestRun)
note right of TestRun: TestRun is the run\n on each device of\n a test task
entity (TestResult)
note right of TestResult: TestResult is the status\n and raw data collected\n during/after a test run
entity (TestReport)
note right of TestReport: TestReport is the\n summary of a test\n task result in a more\n human-readable format
entity (AndroidTestUnit)
entity (PerformanceTestResult)

TestTaskSpec o--o TestTask: is 1 on 1 mapped to
TestTask o--> TestRun: contain a list of
TestTask o--o TestReport: is 1 on 1 mapped to
TestRun o--> AndroidTestUnit: maybe contain\n a list of if\n it's Android Espresso Test
TestRun o--o TestResult: is 1 on 1 mapped to
@enduml